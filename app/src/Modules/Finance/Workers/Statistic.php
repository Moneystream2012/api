<?php
/**
 * @author Andru Cherny <acherny@minexsystems.com>
 * Date: 27.09.17
 * Time: 16:20
 */
declare(strict_types=1);

namespace App\Modules\Finance\Workers;

use App\Modules\Finance\Components\FinanceModelFactory;
use Danhunsaker\BC;
use yii\base\Object;

/**
 * Class Statistic
 * @package App\Modules\Finance\Workers
 */
class Statistic extends Object
{
	/**
	 *
	 */
	const WEEKLY = 604800;

	/**
	 * @var int
	 */
	private $scale;


	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
		$this->scale = \Yii::$app->params['scale'];
	}

	/**
	 * @return array
	 */
	public function debtsForThisWeek() : array {

		$currentTime = time();
		$endTime = $currentTime + self::WEEKLY;

		/** @var \App\Modules\Finance\Models\FinanceParkingType $parkingTypes */
		$parkingTypes = FinanceModelFactory::getClass(FinanceModelFactory::PARKING_TYPE);
		$parkingTypes = $parkingTypes::find()->select(['id', 'period'])->asArray()->all();

		$grouped = [
			'before' => [],
			'after'  => []
		];

		$response = [];
		foreach ($parkingTypes as $item) {
			if (isset($item['period']) && $item['period'] > self::WEEKLY) {
				$grouped['after'][] = $item;
			} else {
				$grouped['before'][] = $item['id'];
			}

			$response[$item['id']] = 0;
		}

		/** @var \App\Modules\Finance\Models\FinanceParking $parkingModel */
		$parkingModel = FinanceModelFactory::getClass(FinanceModelFactory::PARKING);

		//All parking before 1 week
		$parkings = $parkingModel::find()
			->asArray()
			->filterStatus([$parkingModel::TYPE_ACTIVE, $parkingModel::TYPE_PENDING])
			->typeIs($grouped['before'])
			->all();

		//Add parkings filtered by time
		foreach ($grouped['after'] as $afterItem) {
			$currentTime = $currentTime - $afterItem['period'];
			$endTime = $endTime - $afterItem['period'];

            $parkings = array_merge($parkings, $parkingModel::find()
				->asArray()
				->filterStatus([$parkingModel::TYPE_ACTIVE, $parkingModel::TYPE_PENDING])
				->typeIs($afterItem['id'])
				->createAtBetween($currentTime, $endTime)
				->all()
			);
		}

		$total = 0;
		foreach ($parkings as $parking) {

		    if (!isset($response[$parking['typeId']])) {
                $response[$parking['typeId']] = 0;
            }

            $reward = $parking['amount'] * $parking['rate'];
            $response[$parking['typeId']] += $reward;
		    $total += $reward;
        }

		$response['total'] = $total;

		return $response;
	}
}